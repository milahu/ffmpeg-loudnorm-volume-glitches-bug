#! /usr/bin/env bash

# ffmpeg-loudnorm-format-filters.sh

# second pass of ffmpeg loudnorm filter

# take a json file generated by ffmpeg-loudnorm-analyze.sh
# and format audio filters for ffmpeg

# example output:
# loudnorm=linear=true:I=-14:LRA=7:tp=-1:measured_I=-30.05:measured_LRA=16.60:measured_tp=-0.01:measured_thresh=-41.55:offset=0.46:print_format=summary

# to use the audio filter in ffmpeg:
# ffmpeg -af "loudnorm=..."

# https://ffmpeg.org/ffmpeg-filters.html#loudnorm
# normalization_type: Literal["ebu", "rms", "peak"] = "ebu",
# target_level: float = -23.0,
# loudness_range_target: float = 7.0,
# true_peak: float = -2.0,

# ffmpeg-normalize/ffmpeg_normalize/_media_file.py
# _get_audio_filter_cmd

# ffmpeg-normalize/ffmpeg_normalize/_streams.py
# get_second_pass_opts_ebu
# get_second_pass_opts_peakrms

#         opts = {
#             "i": self.media_file.ffmpeg_normalize.target_level,
#             "lra": self.media_file.ffmpeg_normalize.loudness_range_target,
#             "tp": self.media_file.ffmpeg_normalize.true_peak,
#             "offset": self._constrain(
#                 float(stats["target_offset"]), -99, 99, name="target_offset"
#             ),
#             "measured_i": self._constrain(
#                 float(stats["input_i"]), -99, 0, name="input_i"
#             ),
#             "measured_lra": self._constrain(
#                 float(stats["input_lra"]), 0, 99, name="input_lra"
#             ),
#             "measured_tp": self._constrain(
#                 float(stats["input_tp"]), -99, 99, name="input_tp"
#             ),
#             "measured_thresh": self._constrain(
#                 float(stats["input_thresh"]), -99, 0, name="input_thresh"
#             ),
#             "linear": "false" if self.media_file.ffmpeg_normalize.dynamic else "true",
#             "print_format": "json",
#         }

# https://superuser.com/questions/1604545/ffmpeg-loudnorm-results-in-not-very-loud
# https://youlean.co/loudness-standards-full-comparison-table/
# Film, TV and Gaming
# max_integrated=-23 # EBU
# max_integrated=-24 # ATSC, OP-59, ARIB, AGCOM, ASWG-R001 HOME
# max_integrated=-18 # ASWG-R001 PORTABLE
# Online Streaming
# max_integrated=-14 # YouTube, Spotify, TIDAL, Amazon Music, Amazon Alexa
# max_integrated=-15 # Deezer
# max_integrated=-16 # Apple, AES

loudnorm_i=-14.0 # max integrated
loudnorm_lra=7.0 # loudness range. Range is 1.0 - 50.0. Default value is 7.0
loudnorm_tp=-2.0 # true peak
#loudnorm_offset=0.0

loudnorm_linear=true
#loudnorm_print_format=summary
loudnorm_extra_args=

set -e
set -u

json_file="$1"

if ! jq . "$json_file" >/dev/null; then
  echo "error: invalid json in ${json_file@Q}" >&2
  exit 1
fi

stream_ids=$(jq -r 'keys[]' "$json_file" | sort -n)

s='"'
s+="loudnorm="
s+="i=$loudnorm_i:"
s+="lra=$loudnorm_lra:"
s+="tp=$loudnorm_tp:"
#s+="offset=$loudnorm_offset:"
s+="linear=$loudnorm_linear:"
#s+="print_format=json:"
s+='measured_i=\(.input_i):'
s+='measured_lra=\(.input_lra):'
s+='measured_tp=\(.input_tp):'
s+='measured_thresh=\(.input_thresh):'
s+='offset=\(.target_offset):'
s="${s:0: -1}"
#s+='print_format=:'$loudnorm_print_format # not needed
s+="$loudnorm_extra_args"
s+='"'

jq_script="$s"

# print one filter per line, sorted by loudnorm result index
for stream_id in $stream_ids; do
  stream_json="$(jq -r ".\"$stream_id\"" "$json_file")"
  ffmpeg_loudnorm_filter="$(echo "$stream_json" | jq -r "$jq_script")"
  echo "$ffmpeg_loudnorm_filter"
done
